<Card Class="px-0 mx-3 my-3 animated-card" Style="max-width: 100%;">
    <CardHeader>
        @if (Note.IsPinned)
        {
            <CardTitle Style="padding-top: 6px; max-width: calc(100% - 25px);">
                @Note.Title
            </CardTitle>
            <CardTitle Style="padding-top: 6px; position: absolute; top: 8px; right: 13px;">📌</CardTitle>
        }
        else
        {
            <CardTitle Style="padding-top: 6px;">
                @Note.Title
            </CardTitle>
        }
        <CardSubTitle Class="mb-2 text-muted">@(Note.Color.Name + Note.Color.Symbol)</CardSubTitle>
        @if (Note.IsArchived)
        {
            <CardSubTitle Class="mb-2 text-muted" Style="text-align: end; margin-top: -27px; margin-right: 4px;">
                <i class="bi bi-archive"></i>
            </CardSubTitle>
        }
    </CardHeader>
    <CardBody>
        <CardText>
            <b>Tags:</b> <br /> 
            @if (Note.Tags is null || Note.Tags.Length == 0)
            {
                <span>-</span>
            }
            else
            {
                var tags = NoteUtils.ToTagArray(Note.Tags);

                for (var i = 0; i < int.Min(15, tags.Length); i++)
                {
                    <NoteTagItem Text="@UIUtils.TruncateString(tags[i], 50)" />
                }

                if (tags.Length > 15)
                {
                    <span>...</span>
                }
            }
        </CardText>
    </CardBody>
    <CardBody Class="border-top">
        <CardText Class="border-bottom" Style="padding-bottom: 11px; margin-bottom: 11px;">
            <b>Updated at: </b> <br /> @Note.UpdatedAt.ToString("ddd, dd. MMMM yyyy HH:mm")
        </CardText>
        <CardText>
            <b>Created at: </b> <br /> @Note.CreatedAt.ToString("ddd, dd. MMMM yyyy HH:mm")
        </CardText>
    </CardBody>
    <CardFooter Style="text-align: end">
        <div style="text-align: start; display: inline-block; width: calc(100% - 123px);">
            <Button Size="ButtonSize.Small" Color="ButtonColor.Warning" TooltipTitle="@(Note.IsArchived ? "Unarchive Note" : "Archive Note")" @onclick="ArchiveNoteAsync">
                <Icon Name="@(Note.IsArchived ? IconName.ArchiveFill : IconName.Archive)" Size="IconSize.x6"/>
            </Button>
            <Button @ref="_copyButton" @onclick="CopyToClipboard" Class="btn-translucient-v4 border-secondary-subtle" Size="ButtonSize.Small" Style="margin-left: 6px;">
                <LoadingTemplate>
                    <Icon Name="IconName.CheckLg" Color="IconColor.Success" Size="IconSize.x6" />
                </LoadingTemplate>
                <ChildContent>
                    <Icon Name="IconName.Copy" Size="IconSize.x6" />
                </ChildContent>
            </Button>
        </div>
        <Button Size="ButtonSize.Small" Color="ButtonColor.Primary" @onclick="NoteDetail">
            Detail <Icon Name="IconName.ArrowRight" Size="IconSize.x6"/>
        </Button>
        <Button Size="ButtonSize.Small" Color="ButtonColor.Danger" Style="margin-left: 6px" TooltipTitle="Delete Note" @onclick="DeleteNoteAsync">
            <Icon Name="IconName.Trash" Size="IconSize.x6"/>
        </Button>
    </CardFooter>
</Card>

@code {
    [Parameter] public Note Note { get; set; }
    [Parameter] public EventCallback OnNoteUpdated { get; set; } // was EventCallback<int> OnGradeDeleted { get; set; }
    [Parameter] public ConfirmDialog Dialog { get; set; } = default!;

    [Inject] private INoteRepository _noteRepository { get; set; }
    [Inject] private NavigationManager Navigation { get; set; }
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    [Inject] protected ToastService ToastService { get; set; } = default!;

    private Button _copyButton = default!;


    private void NoteDetail() => Navigation.NavigateTo($"/notes/{Note.Id}");

    #region Copy Detail Page URL

    private async Task CopyToClipboard()
    {
        //_copyButton.ShowLoading();
        _copyButton.Loading = true;
        //_copyButton.TooltipTitle = "Copied!";

        var textToCopy = $"[Note with Id: {Note.Id}](/notes/{Note.Id})";
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", textToCopy);
        //await Clipboard.SetTextAsync(textToCopy);

        //ToastService.Notify(new ToastMessage(ToastType.Success, "Copied note detail page URL to clipboard"));

        await Task.Delay(3000);

        //_copyButton.HideLoading();
        _copyButton.Loading = false;
        //_copyButton.TooltipTitle = "Copy link";
    }

    #endregion

    #region Delete Note

    private async Task DeleteNoteAsync()
    {
        var options = new ConfirmDialogOptions
        {
            YesButtonColor = ButtonColor.Danger,
        };

        var confirmation = await Dialog.ShowAsync(
            title: "Are you sure you want to delete this Note?",
            message1: $"Note: {Note.Title} with color: {Note.Color.Name} {Note.Color.Symbol}, created at: {Note.CreatedAt:f} and last updated at: {Note.UpdatedAt:f} will be deleted.",
            message2: "Do you want to proceed?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            try
            {
                await _noteRepository.DeleteByIdAsync(Note.Id);
                await OnNoteUpdated.InvokeAsync();
                ToastService.Notify(new ToastMessage(ToastType.Success, $"Note deleted successfully.")); // maybe add Name of deleted object
            }
            catch (Exception e)
            {
                ToastService.Notify(new ToastMessage(ToastType.Danger, $"Error deleting note: {e.Message}"));
            }
        }
    }

    #endregion

    #region Archive Note

    private async Task ArchiveNoteAsync()
    {
        Note.IsArchived = !Note.IsArchived;

        try
        {
            await _noteRepository.UpdateAsync(Note.Id, Note);
            await OnNoteUpdated.InvokeAsync();
            ToastService.Notify(new ToastMessage(ToastType.Success, $"Note {(Note.IsArchived ? "archived" : "unarchived")} successfully.")); // maybe add Name of archived object
        }
        catch (Exception e)
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, $"Error {(Note.IsArchived ? "archived" : "unarchived")} note: {e.Message}"));
        }
    }

    #endregion
}