<Card Class="px-0 mx-3 my-3 animated-card" Style="max-width: 100%;">
    @*Later set id of card (also Education and Subject) => Id="@("g" + Grade.Id.ToString())" for navigation right scrollposition for Example: /Grades#g1*@
    <CardHeader>
        @if (Note.IsPinned)
        {
            <CardTitle Style="padding-top: 6px; max-width: calc(100% - 25px);">
                @Note.Title
            </CardTitle>
            <CardTitle Style="padding-top: 6px; position: absolute; top: 8px; right: 13px;">📌</CardTitle>
        }
        else
        {
            <CardTitle Style="padding-top: 6px;">
                @Note.Title
            </CardTitle>
        }
        <CardSubTitle Class="mb-2 text-muted">@Note.Color.Name @Note.Color.Symbol</CardSubTitle>
        @if (Note.IsArchived)
        {
            <CardSubTitle Class="mb-2 text-muted" Style="text-align: end; margin-top: -27px; margin-right: 4px;">
                <i class="bi bi-archive"></i>
            </CardSubTitle>
        }
    </CardHeader>
    @* <CardBody>
        <CardText>
            <b>Description:</b> <br /> @UIUtils.TruncateStringWithFallback(Note.Description, "-", 125)
        </CardText>
    </CardBody> *@
    <CardBody Class="border-top">
        <CardText Class="border-bottom" Style="padding-bottom: 11px; margin-bottom: 11px;">
            <b>Updated at: </b> @Note.UpdatedAt.ToString("f")
            @* <CompletionStateBadge Completed="Note.Subject.Education.Completed" MarginBottom="1" /> *@
        </CardText>
        <CardText>
            <b>Created at: </b> @Note.CreatedAt.ToString("f")
            @* <CompletionStateBadge Completed="Note.Subject.Completed" MarginBottom="1" /> *@
        </CardText>
    </CardBody>
    <CardFooter Style="text-align: end">
        <Button Size="ButtonSize.Small" Color="ButtonColor.Primary" @onclick="NoteDetail">
            Detail <Icon Name="IconName.ArrowRight" Size="IconSize.x6" />
        </Button>
        <Button Size="ButtonSize.Small" Color="ButtonColor.Danger" Style="margin-left: 6px" TooltipTitle="Delete Grade" @onclick="DeleteNoteAsync">
            <Icon Name="IconName.Trash" Size="IconSize.x6" />
        </Button>
    </CardFooter>
</Card>

@code {
    [Parameter] public Note Note { get; set; }
    [Parameter] public EventCallback OnNoteDeleted { get; set; } // was EventCallback<int> OnGradeDeleted { get; set; }
    [Parameter] public ConfirmDialog Dialog { get; set; } = default!;

    [Inject] private INoteRepository _noteRepository { get; set; }
    [Inject] private NavigationManager Navigation { get; set; }

    [Inject] protected ToastService ToastService { get; set; } = default!;


    private void NoteDetail() => Navigation.NavigateTo($"/notes/{Note.Id}");

    #region Delete Grade

    private async Task DeleteNoteAsync()
    {
        var options = new ConfirmDialogOptions
        {
            YesButtonColor = ButtonColor.Danger,
        };

        var confirmation = await Dialog.ShowAsync(
            title: "Are you sure you want to delete this Note?",
            message1: $"Note: {Note.Title} with color {Note.Color.Name} {Note.Color.Symbol}, created at: {Note.CreatedAt:f} and last updated at: {Note.UpdatedAt:f} will be deleted.",
            message2: "Do you want to proceed?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            try
            {
                await _noteRepository.DeleteByIdAsync(Note.Id);
                await OnNoteDeleted.InvokeAsync();
                ToastService.Notify(new ToastMessage(ToastType.Success, $"Note deleted successfully.")); // maybe add Name of deleted object
            }
            catch (Exception e)
            {
                ToastService.Notify(new ToastMessage(ToastType.Danger, $"Error deleting note: {e.Message}"));
            }
        }
    }

    #endregion
}