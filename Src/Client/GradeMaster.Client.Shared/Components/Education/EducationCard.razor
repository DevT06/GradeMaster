<Card Class="px-0 mx-3 my-3 animated-card" Style="user-select: text; max-width: 100%;">
    <CardHeader>
        <CardTitle Style="padding-top: 6px">
            <b>@Education.Name</b>
        </CardTitle>
        <CardSubTitle Class="mb-2 text-muted">@Education.StartDate.Year - @Education.EndDate.Year @UIUtils.TruncateString(string.IsNullOrEmpty(Education.Institution) ? " " : "| " + Education.Institution.Split(",")[0], 15)</CardSubTitle>
    </CardHeader>
    <CardBody>
        <CardText>
            <b>Description:</b> <br/> @UIUtils.TruncateString(string.IsNullOrEmpty(Education.Description) ? "-" : Education.Description, 150)
        </CardText>
    </CardBody>
    <CardBody Class="border-top">
        <CardText Class="border-bottom" Style="padding-bottom: 11px; margin-bottom: 11px;">
            <b>Education Average: </b>
            @if (_educationAverage < 4 && _educationAverage != 0)
            {
                <Badge Color="BadgeColor.Danger" IndicatorType="BadgeIndicatorType.RoundedPill" Style="font-size: 14px;">
                    @(_educationAverage == 0 ? "N/A" : _educationAverage.ToString("0.##"))
                </Badge>
            }
            else
            {
                @(_educationAverage == 0 ? "N/A" : _educationAverage.ToString("0.##"))
            }
        </CardText>
        <CardText Class="border-bottom" Style="padding-bottom: 11px; margin-bottom: 11px;">
            <b>Total Semesters:</b> @Education.Semesters
        </CardText>
        <CardText Class="border-bottom" Style="padding-bottom: 11px; margin-bottom: 11px;">
            <b>Completion State:</b>
            <Badge Color="@(Education.Completed ? BadgeColor.Success : BadgeColor.Warning)" IndicatorType="BadgeIndicatorType.RoundedPill">
                @(Education.Completed ? "Completed" : "In Progress")
            </Badge>
        </CardText>
        <CardText>
            <b>Subject Amount:</b> @Education.Subjects.Count()
        </CardText>
    </CardBody>
    <CardFooter Style="text-align: end">
        <Button Size="ButtonSize.Small" Color="ButtonColor.Primary" @onclick="EducationDetail">
            Detail <Icon Name="IconName.ArrowRight" Size="IconSize.x6"/>
        </Button>
        <Button Size="ButtonSize.Small" Color="ButtonColor.Danger" Style="margin-left: 6px" TooltipTitle="Delete Education" @onclick="DeleteEducationAsync">
            <Icon Name="IconName.Trash" Size="IconSize.x6"/>
        </Button>
    </CardFooter>
</Card>

@* <ConfirmDialog @ref="_dialog"/> *@

@code {
    [Parameter] public Education Education { get; set; }
    [Parameter] public EventCallback OnEducationDeleted { get; set; } // was EventCallback<int> OnEducationDeleted { get; set; }
    [Parameter] public ConfirmDialog Dialog { get; set; } = default!;

    [Inject] private IEducationRepository _educationRepository { get; set; }

    [Inject] private NavigationManager Navigation { get; set; }

    [Inject] protected ToastService ToastService { get; set; } = default!;

    private decimal _educationAverage;


    protected override void OnParametersSet()
    {
        _educationAverage = EducationUtils.CalculateEducationAverage(Education.Subjects);
    }

    private void EducationDetail()
    {
        Navigation.NavigateTo($"/educations/{Education.Id}");
    }

    #region Delete Education

    //private ConfirmDialog _dialog = default!;

    private async Task DeleteEducationAsync()
    {
        var options = new ConfirmDialogOptions
        {
            YesButtonColor = ButtonColor.Danger,
        };

        var confirmation = await Dialog.ShowAsync(
            title: "Are you sure you want to delete this Education?",
            message1: $"Education: {Education.Name}, {Education.Subjects.Count()} Subject(s) and all related Objects will be deleted.",
            message2: "Do you want to proceed?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            try
            {
                await _educationRepository.DeleteByIdAsync(Education.Id);
                await OnEducationDeleted.InvokeAsync(Education.Id); // was await OnEducationDeleted.InvokeAsync(Education.Id);
                ToastService.Notify(new ToastMessage(ToastType.Success, $"Education deleted successfully.")); // maybe add Name of deleted object
            }
            catch (Exception e)
            {
                ToastService.Notify(new ToastMessage(ToastType.Danger, $"Error deleting education: {e.Message}"));
            }
        }
        else
        {
            //ToastService.Notify(new ToastMessage(ToastType.Info, $"Delete action canceled."));
        }
    }

    #endregion

}