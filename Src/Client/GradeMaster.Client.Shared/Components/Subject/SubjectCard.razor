<Card Class="px-0 mx-3 my-3 animated-card" Style="max-width: 100%;">
    <CardHeader>
        <CardTitle Style="padding-top: 6px">
            <b>@Subject.Name - @Subject.Semester</b>
        </CardTitle>
        <CardSubTitle Class="mb-2 text-muted">@UIUtils.TruncateString(Subject.Education.Name, 60) @UIUtils.TruncateString(string.IsNullOrEmpty(Subject.Education.Institution) ? " " : "| " + Subject.Education.Institution.Split(",")[0], 15) 
            <CompletionStateBadge Completed="Subject.Education.Completed" MarginBottom="1" />
        </CardSubTitle>
    </CardHeader>
    <CardBody>
        <CardText>
            <b>Description:</b> <br /> @UIUtils.TruncateStringWithFallback(Subject.Description, "-", 150)
        </CardText>
    </CardBody>
    <CardBody Class="border-top">
        <CardText Class="border-bottom" Style="padding-bottom: 11px; margin-bottom: 11px;">
            <b>Subject Average: </b>
            @if (_subjectAverage < 4 && _subjectAverage != 0)
            {
                <Badge Color="BadgeColor.Danger" IndicatorType="BadgeIndicatorType.RoundedPill" Style="font-size: 14px;">
                    @(_subjectAverage == 0 ? "N/A" : _subjectAverage.ToString("0.##"))
                </Badge>
            }
            else
            {
                @(_subjectAverage == 0 ? "N/A" : _subjectAverage.ToString("0.##"))
            }
        </CardText>
        <CardText Class="border-bottom" Style="padding-bottom: 11px; margin-bottom: 11px;">
            <b>Semester: </b> @Subject.Semester of @Subject.Education.Semesters
        </CardText>
        <CardText Class="border-bottom" Style="padding-bottom: 11px; margin-bottom: 11px;">
            <b>Completion State:</b>
            <Badge Color="@(Subject.Completed ? BadgeColor.Success : BadgeColor.Warning)" IndicatorType="BadgeIndicatorType.RoundedPill">
                @(Subject.Completed ? "Completed" : "In Progress")
            </Badge>
        </CardText>
        <CardText>
            <b>Grade Amount:</b> @Subject.Grades.Count()
        </CardText>
    </CardBody>
    <CardFooter Style="text-align: end">
        <Button Size="ButtonSize.Small" Color="ButtonColor.Primary" @onclick="SubjectDetail">
            Detail <Icon Name="IconName.ArrowRight" Size="IconSize.x6" />
        </Button>
        <Button Size="ButtonSize.Small" Color="ButtonColor.Danger" Style="margin-left: 6px" TooltipTitle="Delete Subject" @onclick="DeleteSubjectAsync">
            <Icon Name="IconName.Trash" Size="IconSize.x6" />
        </Button>
    </CardFooter>
</Card>

@code {
    [Parameter] public Subject Subject { get; set; }
    [Parameter] public EventCallback OnSubjectDeleted { get; set; } // was EventCallback<int> OnSubjectDeleted { get; set; }
    [Parameter] public ConfirmDialog Dialog { get; set; } = default!;

    [Inject] private ISubjectRepository _subjectRepository { get; set; }
    [Inject] private NavigationManager Navigation { get; set; }

    [Inject] protected ToastService ToastService { get; set; } = default!;

    private decimal _subjectAverage;

    // maybe change to OnInitialized()
    protected override void OnParametersSet()
    {
        _subjectAverage = SubjectUtils.CalculateWeightedAverage(Subject.Grades);
    }

    private void SubjectDetail() => Navigation.NavigateTo($"/subjects/{Subject.Id}");

    #region Delete Subject

    private async Task DeleteSubjectAsync()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonColor = ButtonColor.Danger,
            };

        var confirmation = await Dialog.ShowAsync(
            title: "Are you sure you want to delete this Subject?",
            message1: $"Subject: {Subject.Name} - {Subject.Semester} of Education: {Subject.Education.Name} and all of its {Subject.Grades.Count()} Grade(s) will be deleted.",
            message2: "Do you want to proceed?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            try
            {
                await _subjectRepository.DeleteByIdAsync(Subject.Id);
                await OnSubjectDeleted.InvokeAsync(); // was await OnSubjectDeleted.InvokeAsync(Subject.Id);
                ToastService.Notify(new ToastMessage(ToastType.Success, $"Subject deleted successfully.")); // maybe add Name of deleted object
            }
            catch (Exception e)
            {
                ToastService.Notify(new ToastMessage(ToastType.Danger, $"Error deleting subject: {e.Message}"));
            }
        }
    }

    #endregion
}