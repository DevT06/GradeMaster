<h3 style="margin-bottom: 25px">@FormTitle: @Education.Name</h3>

<EditForm OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" EditContext="_editContext">
    <DataAnnotationsValidator/>
    <Card Style="max-width: 1000px; border: none;">

        <!-- Name Field -->
        <div class="form-group row mb-3">
            <Label class="col-md-2 col-form-label nowrap" for="educationName">
                <strong>Name: <span class="text-danger">*</span></strong>
            </Label>
            <div class="col-md-10">
                <InputText @bind-Value="NewEducation.Name" Id="educationName" class="form-control" Placeholder="Enter the education name"/>
                <ValidationMessage For="@(() => NewEducation.Name)"/>
            </div>
        </div>

        <!-- Institution Field -->
        <div class="form-group row mb-3">
            <Label class="col-md-2 col-form-label nowrap" for="institutionName">Institution:</Label>
        <div class="col-md-10">
            <InputText @bind-Value="NewEducation.Institution" Id="institutionName" class="form-control" Placeholder="Enter the institution name"/>
            <ValidationMessage For="@(() => NewEducation.Institution)"/>
            </div>
        </div>

        <!-- Start to End Date Fields -->
        <div class="mb-3 d-flex align-items-center" style="gap: 0px;">
            <!-- Start Date -->
            <Label class="col-md-2 col-form-label nowrap"></Label>
            
            <div style="display: flex; flex-direction: column; align-items: start;">
                <Label for="startDate">
                    <strong>Start Date: <span class="text-danger">*</span></strong>
                </Label>
                <InputDate @bind-Value="NewEducation.StartDate" Id="startDate" class="form-control" style="width: auto; max-width: 200px;"/>
                @* <ValidationMessage For="@(() => NewEducation.StartDate)" /> *@
            </div>

            <p style="margin-top: 35px; margin-right: 9px; margin-left: 9px; font-weight: bold;">-</p>

            <!-- End Date -->
            <div style="display: flex; flex-direction: column; align-items: start;">
                <Label for="endDate">
                    <strong>End Date: <span class="text-danger">*</span></strong>
                </Label>
                <InputDate @bind-Value="NewEducation.EndDate" Id="endDate" class="form-control" style="width: auto; max-width: 200px"/>
                @* <ValidationMessage For="@(() => NewEducation.EndDate)" /> *@
            </div>
        </div>

        @* <!-- End Date Field -->
            <div class="mb-3" style="width: 200px">
                <Label for="endDate"><strong>End Date</strong></Label>
                <InputDate @bind-Value="NewEducation.EndDate" Id="endDate" class="form-control" />
                <ValidationMessage For="@(() => NewEducation.EndDate)" />
            </div> *@

        <!-- Total Semesters Field -->
        <div class="form-group row mb-3">
            <label class="col-md-2 col-form-label nowrap"></label>
            <div>
            <Label class="col-form-label nowrap" for="totalSemesters">
                <strong>Total Semesters: <span class="text-danger">*</span></strong>
            </Label>
            <NumberInput TValue="int" @bind-Value="NewEducation.Semesters" EnableMinMax="true" Max="256" Min="1" Id="totalSemesters" class="form-control" Placeholder="Enter total semesters" style="width: 155px;"/>
            <ValidationMessage For="@(() => NewEducation.Semesters)"/>
            </div>
        </div>

        <!-- Completion State Field -->
        <div class="form-group mb-3">
            <Label class="col-form-label nowrap" for="completionState">
                <strong>Completion State: <span class="text-danger">*</span></strong>
            </Label>
            <div class="form-check">
                <InputCheckbox @bind-Value="NewEducation.Completed" Id="completionState" class="form-check-input"/>
                <Label class="form-check-label" for="completionState">
                    @(NewEducation.Completed ? "Completed" : "In Progress")
                </Label>
            </div>
            <ValidationMessage For="@(() => NewEducation.Completed)"/>
        </div>

        <!-- Description Field -->
        <div class="form-group row mb-3">
            <Label class="col-md-2 col-form-label nowrap" for="description">Description:</Label>
        <div class="col-md-10">
            <InputTextArea @bind-Value="Education.Description" Id="description" class="form-control" Rows="4" Placeholder="Enter a description"/>
            <ValidationMessage For="@(() => Education.Description)"/>
            </div>
        </div>


        <div>
            <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Style="">Save</Button>
            <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" @onclick="Cancel">Cancel</Button>
        </div>
    </Card>
</EditForm>

<style>
    .nowrap {
        white-space: nowrap;
    }
</style>

@code {
    [Parameter] public Education? Education { get; set; }
    [Parameter] public EventCallback<Education> OnSave { get; set; }

    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Inject] private NavigationManager Navigation { get; set; }

    [Inject] protected ToastService ToastService { get; set; } = default!;

    private EditContext? _editContext;

    private string FormTitle { get; set; } = "Education Form";

    public Education NewEducation { get; set; } = new();

    protected override void OnInitialized()
    {
        if (Education == null)
        {
            // Initialize Education for creation
            Education = new Education
            {
                StartDate = DateTime.Today,
                EndDate = DateTime.Today.AddYears(1),
                Semesters = 2,
                Completed = false
            };

            FormTitle = "Create New Education";
        }
        else
        {
            FormTitle = "Edit Education";
        }

        PassEducationAttributes(NewEducation, Education);

        _editContext = new EditContext(NewEducation);
    }

    private async Task HandleValidSubmit()
    {
        if (OnSave.HasDelegate)
        {
            PassEducationAttributes(Education, NewEducation);

            await OnSave.InvokeAsync(Education);
        }
        else
        {
            // Optional fallback logic
            // show error
            ToastService.Notify(new ToastMessage(ToastType.Danger, $"Education could not be saved."));
        }
    }

    private async Task Cancel()
    {
        ToastService.Notify(new ToastMessage(ToastType.Info, $"Edit Action canceled."));
        await JSRuntime.InvokeVoidAsync("window.history.back");
    }

    private async Task HandleInvalidSubmit()
    {
        ToastService.Notify(new ToastMessage(ToastType.Warning, $"Education form is not valid."));
    }

    #region Logic

    private void PassEducationAttributes(Education toEducation, Education fromEducation)
    {
        toEducation.Name = fromEducation.Name;
        toEducation.Completed = fromEducation.Completed;
        toEducation.Description = fromEducation.Description;
        toEducation.Semesters = fromEducation.Semesters;
        toEducation.Institution = fromEducation.Institution;
        toEducation.StartDate = fromEducation.StartDate;
        toEducation.EndDate = fromEducation.EndDate;
    }

    #endregion

}