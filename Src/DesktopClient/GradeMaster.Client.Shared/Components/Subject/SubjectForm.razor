<div class="border-top" style="width: 100%; max-width: 1000px; margin-top: 15px"></div>
@if (FormType == FormType.Edit)
{
    <h4 style="margin-bottom: 25px; margin-top: 10px;">@FormTitle: @Subject.Name</h4>
}
else
{
    <div style="margin-top: 25px;"></div>
}
<EditForm OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" EditContext="_editContext">
    <DataAnnotationsValidator/>
    <Card Style="max-width: 1000px; border: none;">

        <!-- Name Field -->
        <div class="form-group row mb-3">
            <label class="col-md-2 col-form-label nowrap" for="educationName">
                <strong>Name: <span class="text-danger">*</span></strong>
            </label>
            <div class="col-md-10">
                <InputText @bind-Value="NewSubject.Name" Id="subjectName" class="form-control" Placeholder="Enter the subject name"/>
                <ValidationMessage For="@(() => NewSubject.Name)"/>
            </div>
        </div>

        @* <!-- Institution Field -->
        <div class="form-group row mb-3">
            <label class="col-md-2 col-form-label nowrap" for="institutionName">Institution:</label>
            <div class="col-md-10">
                <InputText @bind-Value="NewEducation.Institution" Id="institutionName" class="form-control" Placeholder="Enter the institution name"/>
                @* <ValidationMessage For="@(() => NewEducation.Institution)"/> 
            </div>
        </div>

        <!-- Start to End Date Fields -->
        <div class="mb-3 d-flex align-items-center" style="gap: 4px;">
            <!-- Start Date -->
            <label class="col-md-2 col-form-label nowrap"></label>

            <div style="display: flex; flex-direction: column; align-items: start;">
                <label for="startDate">
                    <strong>Start Date: <span class="text-danger">*</span></strong>
                </label>
                <InputDate @bind-Value="NewEducation.StartDate" Id="startDate" class="form-control" style="width: auto; max-width: 200px;"/>
                @* <ValidationMessage For="@(() => NewEducation.StartDate)" /> 
            </div>

            <p style="margin-top: 35px; margin-right: 9px; margin-left: 9px; font-weight: bold;">-</p>

            <!-- End Date -->
            <div style="display: flex; flex-direction: column; align-items: start;">
                <label for="endDate">
                    <strong>End Date: <span class="text-danger">*</span></strong>
                </label>
                <InputDate @bind-Value="NewEducation.EndDate" Id="endDate" class="form-control" style="width: auto; max-width: 200px"/>
                @* <ValidationMessage For="@(() => NewEducation.EndDate)" /> 
            </div>
        </div> *@
        <!-- Education Field -->
        <div class="form-group row mb-3">
            <label class="col-form-label nowrap"><strong>Education: <span class="text-danger">*</span></strong></label>
            <select class="form-select" style="min-width: 200px; max-width: 400px" aria-label="Default select example" name="selectFieldEducation" id="selectFieldEducation"
                    @bind="SelectedEducationId">
                <option value="" style="background-color: #eeeeee; border: solid 1px">Select Education</option>
                @foreach (var education in Educations)
                {
                    <option value="@education.Id" style="background-color: #eeeeee">@education.Name</option>
                }
            </select>
            <ValidationMessage For="@(() => NewSubject.Education)" />
        </div>
        <!-- Total Semesters Field -->
        <div class="form-group row mb-3">
            <label class="col-md-2 col-form-label nowrap"></label>
            <div class="col-md-10">
                <label class="col-form-label nowrap" for="semester">
                    <strong>Semester: <span class="text-danger">*</span></strong>
                </label>
                <NumberInput TValue="int" @bind-Value="NewSubject.Semester" EnableMinMax="true" Max="@NewSubject.Education.Semesters" Min="1" Id="semester" class="form-control" Placeholder="Enter total semesters" style="width: 155px;"/>
                <ValidationMessage For="@(() => NewSubject.Semester)"/>
                <!--Show message that -->
            </div>
        </div>

        <!-- Completion State Field -->
        <div class="form-group row mb-3">
            <label class="col-md-2 col-form-label nowrap"></label>
            <div class="col-md-10">
                <label class="col-form-label nowrap" for="completionState">
                    <strong>Completion State: <span class="text-danger">*</span></strong>
                </label>
                <div class="form-check">
                    <InputCheckbox @bind-Value="NewSubject.Completed" Id="completionState" class="form-check-input"/>
                    <Label class="form-check-label" for="completionState">
                        @(NewSubject.Completed ? "Completed" : "In Progress")
                    </Label>
                </div>
                <ValidationMessage For="@(() => NewSubject.Completed)"/>
            </div>
        </div>

        <!-- Description Field -->
        <div class="form-group row mb-3">
            <label class="col-md-2 col-form-label nowrap" for="description">Description:</label>
            <div class="col-md-10">
                <InputTextArea @bind-Value="NewSubject.Description" Id="description" class="form-control" Rows="4" Placeholder="Enter a description" style="max-height: 256px"/>
                @* <ValidationMessage For="@(() => NewEducation.Description)"/> *@
            </div>
        </div>

        <div class="border-top" style="width: 100%; margin-top: 15px"></div>

        <!-- Buttons -->
        <div class="d-flex justify-content-between my-3">
            <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="Cancel"><Icon Name="IconName.ArrowLeft"/> Cancel</Button>
            <Button Type="ButtonType.Submit" Color="ButtonColor.Success">Save <Icon Name="IconName.Floppy"/></Button>
        </div>
    </Card>
</EditForm>

<style>
    .nowrap { white-space: nowrap; }
</style>
@code {
    [Parameter] public FormType FormType { get; set; }
    [Parameter] public Subject? Subject { get; set; }
    [Parameter] public EventCallback<Subject> OnSave { get; set; }

    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Inject] private NavigationManager Navigation { get; set; }

    [Inject] protected ToastService ToastService { get; set; } = default!;

    [Inject] private IEducationRepository _educationRepository { get; set; }

    private EditContext? _editContext;

    private string FormTitle { get; set; } = "Subject Form";

    public Subject NewSubject { get; set; } = new();

    public List<Education> Educations { get; set; }
    private int SelectedEducationId
    {
        get => NewSubject.Education?.Id ?? 0;
        set
        {
            NewSubject.Education = Educations.FirstOrDefault(e => e.Id == value);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Educations = await _educationRepository.GetAllAsync();

        if (Subject == null)
        {
            // Initialize Education for creation
            Subject = new Subject
                {
                    Semester = 1
                };

            FormTitle = "Create New Subject";
        }
        else
        {
            FormTitle = "Edit Subject";
        }

        PassSubjectAttributes(NewSubject, Subject);

        _editContext = new EditContext(NewSubject);
    }

    private async Task HandleValidSubmit()
    {
        if (OnSave.HasDelegate)
        {
            await OnSave.InvokeAsync(NewSubject);
        }
        else
        {
            // Optional fallback logic
            ToastService.Notify(new ToastMessage(ToastType.Danger, $"Subject could not be saved."));
        }
    }

    private async Task Cancel()
    {
        await JSRuntime.InvokeVoidAsync("window.history.back");
    }

    private async Task HandleInvalidSubmit()
    {
        ToastService.Notify(new ToastMessage(ToastType.Warning, $"Subject form is not valid."));
    }

    #region Logic

    private void PassSubjectAttributes(Subject toSubject, Subject fromSubject)
    {
        toSubject.Name = fromSubject.Name;
        toSubject.Description = fromSubject.Description;
        toSubject.Semester = fromSubject.Semester;
        toSubject.Education = fromSubject.Education;
    }

    #endregion
}
