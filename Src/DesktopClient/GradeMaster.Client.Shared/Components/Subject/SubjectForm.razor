<div class="border-top" style="width: 100%; max-width: 1000px; margin-top: 15px"></div>
@if (FormType == FormType.Edit)
{
    <h4 style="margin-bottom: 25px; margin-top: 10px;">@FormTitle: @Subject.Name - @Subject.Semester</h4>
}
else
{
    <div style="margin-top: 25px;"></div>
}
<EditForm OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" EditContext="_editContext">
    <DataAnnotationsValidator/>
    <Card Style="max-width: 1000px; border: none;">

        <!-- Name Field -->
        <div class="form-group row mb-3">
            <label class="col-md-2 col-form-label nowrap" for="subjectName">
                <strong>Name: <span class="text-danger">*</span></strong>
            </label>
            <div class="col-md-10">
                <InputText @bind-Value="NewSubject.Name" Id="subjectName" class="form-control" Placeholder="Enter the subject name"/>
                <ValidationMessage For="@(() => NewSubject.Name)"/>
            </div>
        </div>

        <!-- Education Field -->
        <div class="form-group row mb-3">
            <label class="col-md-2 col-form-label nowrap"><strong>Education: <span class="text-danger">*</span></strong></label>
            <div class="col-md-10">
                <select class="form-select" style="max-width: 500px" aria-label="Default select example" name="selectFieldEducation" id="selectFieldEducation"
                @bind="SelectedEducationId">
                    <option value="0" class="truncate" style="background-color: #eeeeee; border: solid 1px">Select Education</option>
                    @foreach (var education in Educations)
                    {
                        <option value="@education.Id" class="truncate" style="background-color: #eeeeee;">@TruncateString(education.Name, 60)</option>
                    }
                </select>
                <ValidationMessage For="@(() => NewSubject.Education)"/>
            </div>
        </div>

        <!-- Total Semesters Field -->
        <div class="form-group row mb-3">
            <label class="col-md-2 col-form-label nowrap" for="semester">
                <strong>Semester: <span class="text-danger">*</span></strong>
            </label>
            <div class="col-md-10">
                <NumberInput TValue="int" @bind-Value="NewSubject.Semester" EnableMinMax="true" Max="@(GetMaxSemesterNumber())" Min="1" Id="semester" class="form-control" Placeholder="Enter total semesters" style="width: 155px;" />
                <ValidationMessage For="@(() => NewSubject.Semester)" />
            </div>
        </div>

        <!-- Completion State Field -->
        <div class="form-group row mb-3">
            <label class="col-md-2 col-form-label nowrap"></label>
            <div class="col-md-10">
                <label class="col-form-label nowrap" for="completionState">
                    <strong>Completion State: <span class="text-danger">*</span></strong>
                </label>
                <div class="form-check">
                    <InputCheckbox @bind-Value="NewSubject.Completed" Id="completionState" class="form-check-input"/>
                    <Label class="form-check-label" for="completionState">
                        @(NewSubject.Completed ? "Completed" : "In Progress")
                    </Label>
                </div>
                <ValidationMessage For="@(() => NewSubject.Completed)"/>
            </div>
        </div>

        <!-- Description Field -->
        <div class="form-group row mb-3">
            <label class="col-md-2 col-form-label nowrap" for="description">Description:</label>
            <div class="col-md-10">
                <InputTextArea @bind-Value="NewSubject.Description" Id="description" class="form-control" Rows="4" Placeholder="Enter a description" style="max-height: 256px"/>
            </div>
        </div>

        <div class="border-top" style="width: 100%; margin-top: 15px"></div>

        <!-- Buttons -->
        <div class="d-flex justify-content-between my-3">
            <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="Cancel"><Icon Name="IconName.ArrowLeft"/> Cancel</Button>
            <Button Type="ButtonType.Submit" Color="ButtonColor.Success">Save <Icon Name="IconName.Floppy"/></Button>
        </div>
    </Card>
</EditForm>

<style>
    .nowrap { white-space: nowrap; }

    .truncate {
        max-width: 500px; /* Adjust the width as needed */
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
</style>
@code {
    [Parameter] public FormType FormType { get; set; }
    [Parameter] public Subject? Subject { get; set; }
    [Parameter] public EventCallback<Subject> OnSave { get; set; }

    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Inject] private NavigationManager Navigation { get; set; }

    [Inject] protected ToastService ToastService { get; set; } = default!;

    [Inject] private IEducationRepository _educationRepository { get; set; }

    private EditContext? _editContext;

    private string FormTitle { get; set; } = "Subject Form";

    public Subject NewSubject { get; set; } = new();

    public List<Education> Educations { get; set; }
    private int SelectedEducationId
    {
        get => NewSubject.Education?.Id ?? 0;
        set
        {
            if (Educations != null)
            {
                NewSubject.Education = Educations.FirstOrDefault(e => e.Id == value);
            }
        }
    }

    private int GetMaxSemesterNumber()
    {
        var education = Educations.FirstOrDefault(e => e.Id == SelectedEducationId);

        if (education == null)
        {
            return 256;
        }
        
            return education.Semesters;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Educations = await _educationRepository.GetAllAsync();

            if (Educations == null || !Educations.Any())
            {
                throw new InvalidOperationException("No educations found.");
            }

            if (Subject == null)
            {
                // Initialize Education for creation
                Subject = new Subject
                {
                    Completed = false,
                    Semester = 1,
                    Education = new Education()
                };

                FormTitle = "Create New Subject";
            }
            else
            {
                FormTitle = "Edit Subject";
            }

            PassSubjectAttributes(NewSubject, Subject);

            _editContext = new EditContext(NewSubject);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during initialization: {ex.Message}");
            throw;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (NewSubject.Education == null || NewSubject.Education.Id == 0)
        {
            ToastService.Notify(new ToastMessage(ToastType.Warning, "Please select a valid education."));
            return;
        }

        if (OnSave.HasDelegate)
        {
            PassSubjectAttributes(Subject, NewSubject);
            await OnSave.InvokeAsync(Subject);
        }
        else
        {
            // Optional fallback logic
            ToastService.Notify(new ToastMessage(ToastType.Danger, $"Subject could not be saved."));
        }
    }

    private async Task Cancel()
    {
        await JSRuntime.InvokeVoidAsync("window.history.back");
    }

    private async Task HandleInvalidSubmit()
    {
        ToastService.Notify(new ToastMessage(ToastType.Warning, $"Subject form is not valid."));
    }

    #region Logic

    private void PassSubjectAttributes(Subject toSubject, Subject fromSubject)
    {
        toSubject.Name = fromSubject.Name;
        toSubject.Description = fromSubject.Description;
        toSubject.Semester = fromSubject.Semester;
        toSubject.Completed = fromSubject.Completed;
        toSubject.Education = fromSubject.Education ?? new Education();
    }

    #endregion

    private string TruncateString(string name, int maxLength)
    {
        if (string.IsNullOrEmpty(name) || name.Length <= maxLength)
        {
            return name;
        }

        return name.Substring(0, maxLength) + "...";
    }
}
