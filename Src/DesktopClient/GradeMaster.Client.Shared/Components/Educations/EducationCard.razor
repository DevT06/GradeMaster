<Card Class="px-0 mx-3 my-3" Style="user-select: text; max-width: 450px" >
    @* <CardHeader>
        <b>@Education.Name</b>
    </CardHeader> *@
    <CardHeader>
        <CardTitle>@Education.Name</CardTitle>
        <CardSubTitle Class="mb-2 text-muted">@Education.StartDate.Year - @Education.EndDate.Year</CardSubTitle>
    </CardHeader>
    <CardBody>
        <CardText> Description: <br/> @Education.Description</CardText>
    </CardBody>
    @* <CardBody>
        <CardText><b>Total Semesters:</b> @Education.Semesters</CardText>
        <CardText><b>Completion State:</b> @GetEducationState()</CardText>
        <CardText><b>Subject Amount:</b> @Education.Subjects.Count()</CardText>
    </CardBody> *@
    <ul class="list-group list-group-flush">
        <li class="list-group-item border-top-0">Education Average: @(_educationAverage == 0 ? "N/A" : _educationAverage)</li>
        <li class="list-group-item">Total Semesters: @Education.Semesters</li>
        <li class="list-group-item">Completion State: @GetEducationState()</li>
        <li class="list-group-item">Subject Amount: @Education.Subjects.Count()</li>
    </ul>
    <CardFooter>
        <Button Size="ButtonSize.Small" Color="ButtonColor.Primary">
            Detail <Icon Name="IconName.ArrowRight" Size="IconSize.x6" />
        </Button>
        <Button Size="ButtonSize.Small" Color="ButtonColor.Danger">
            <Icon Name="IconName.Trash" Size="IconSize.x6" />
        </Button>
    </CardFooter>
</Card>

@code {
    [Parameter]
    public Education Education { get; set; }

    [Inject] private IGradeRepository _gradeRepository { get; set; }

    private decimal _educationAverage;

    protected override async Task OnInitializedAsync()
    {
        await CalculateEducationAverage();
    }

    private string GetEducationState()
    {
        return Education.Completed == true ? "Completed" : "In Progress";
    }

    

    private async Task CalculateEducationAverage()
    {
        var grades = await _gradeRepository.GetBySubjectIdsAsync(Education.Subjects.Select(s => s.Id).ToList());
        _educationAverage = CalculateEducationAverage(Education.Subjects);
    }

    private decimal CalculateEducationAverage(List<Subject> subjects)
    {
        if (subjects == null || !subjects.Any())
        {
            return 0;
        }

        var subjectAverages = subjects
            .Where(s => s.Grades != null && s.Grades.Any())
            .Select(s => s.Grades.Average(g => g.Value));

        if (!subjectAverages.Any())
        {
            return 0;
        }

        return subjectAverages.Average();
    }
}