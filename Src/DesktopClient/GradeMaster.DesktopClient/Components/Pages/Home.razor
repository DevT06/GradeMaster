@page "/"

<TopPageHeader>Home</TopPageHeader>

@* <h1>Home</h1> *@

<div class="row py-3 mx-0">
    <!--had classes: bd-navbar sticky-top-->
    <div class="col-10 col-md-10 px-0 mb-3" style="max-width: 400px">
        <b>Education: </b>
        <select class="form-select" style="min-width: 200px; max-width: 400px" aria-label="Default select example" name="selectFieldEducation" id="selectFieldEducation"
                @onchange="ChangeEducation">
            <option value="">Select Education</option>
            @foreach (var education in _educations)
            {
                <option value="@education.Id">@education.Name</option>
            }
        </select>
    </div>
    <!--Add edit and detail button later-->
    <div class="col-2 col-md-1 mb-3 mt-4">
        <Tooltip Title="Create New Education" Color="TooltipColor.Dark" Style="padding-top: 5px">
            <NavLink href="/education/create" class="btn btn-secondary px-2" style="height: 38px; padding-top: 3px;">
                @* <i class="bi bi-plus-circle" style="font-size: 20px"></i> *@
                <Icon Name="IconName.PlusCircle" Size="IconSize.x5"/>
            </NavLink>
        </Tooltip>
    </div>
    <div class="col-12 col-lg-5 text-end ms-auto mb-3 mt-4">
        <h3 class="nowrap">Education Average: @(_educationAverage == 0 ? "N/A" : _educationAverage)</h3>
    </div>
</div>

<div class="row py-5">
    <Grid TItem="Subject"
          Class="table table-hover"
          Data="@_subjects"
          EmptyText="No records to display"
          HeaderRowCssClass="border-bottom-0"
          Responsive="true">

        <GridColumns>
            <GridColumn TItem="Subject" HeaderText="Subject" PropertyName="Name" Class="name-column">
                @context.Name
            </GridColumn>
            <GridColumn TItem="Subject" HeaderText="Grades" SortKeySelector="item => item.Grades != null ? item.Grades.Count : 0" Class="grades-column">
                @string.Join(" | ", @context.Grades != null ? @context.Grades.Select(g => g.Value) : Enumerable.Empty<decimal>())
                <NavLink href="/grade/create" class="btn btn-secondary px-1" style="height: 28px; width: 28px; padding-top: 1px;">
                    <Icon Name="IconName.PlusCircle" Size="IconSize.x6"/>
                </NavLink>
                <!--Later add detail navigation to every grade-->
            </GridColumn>
            <GridColumn TItem="Subject" HeaderText="Average" SortKeySelector="item => item.Grades != null ? item.Grades.Average(g => g.Value) : 0" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.Center" Class="average-grade-column">
                @GetAverageGrade(context.Grades)
            </GridColumn>
        </GridColumns>
    </Grid>
    <!--Later add detail of every row-->
</div>

<style>
    .name-column {
    width: 200px;
    }

    .average-grade-column {
    width: 100px;
    }

    .grades-column {
    width: auto;
    }

    .nowrap {
        white-space: nowrap;
    }
</style>

@code
{
    private List<Education> _educations = new();
    private List<Subject> _subjects = new();

    private decimal _educationAverage = new();

    [Inject] private IEducationRepository EducationRepository { get; set; }
    [Inject] private ISubjectRepository SubjectRepository { get; set; }

    [Inject] private NavigationManager Navigation { get; set; }


    protected override async Task OnInitializedAsync()
    {
        _educations = await EducationRepository.GetAllAsync();
    }

    private async Task ChangeEducation(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int educationId))
        {
            _subjects = await SubjectRepository.GetByEducationIdAsync(educationId);
            _educationAverage = CalculateEducationAverage(_subjects);
        }
        else
        {
            _subjects = new List<Subject>();
            _educationAverage = 0;
        }
    }

    private decimal CalculateEducationAverage(List<Subject> subjects)
    {
        if (subjects == null || !subjects.Any())
        {
            return 0;
        }

        var subjectAverages = subjects
            .Where(s => s.Grades != null && s.Grades.Any())
            .Select(s => s.Grades.Average(g => g.Value));

        if (!subjectAverages.Any())
        {
            return 0;
        }

        return subjectAverages.Average();
    }

    private string GetAverageGrade(ICollection<Grade> grades)
    {
        if (grades != null && grades.Any())
        {
            return grades.Average(g => g.Value).ToString("F2");
        }

        return "N/A";
    }
}