@page "/"

@using Microsoft.AspNetCore.WebUtilities

<TopPageHeader>Home</TopPageHeader>


<div class="row py-3 mx-0">
    <!--had classes: bd-navbar sticky-top-->
    <div class="col-8 col-md-8 px-0 mb-3" style="max-width: 400px">
        <b>Education: </b>
        <select class="form-select" style="min-width: 200px; max-width: 400px" aria-label="Default select example" name="selectFieldEducation" id="selectFieldEducation"
                @bind="SelectedEducationId" @bind:event="onchange">
            <option value="" style="background-color: #eeeeee; border: solid 1px">Select Education</option>
            @foreach (var education in _educations)
            {
                <option value="@education.Id" style="background-color: #eeeeee">@TruncateString(education.Name, 50)</option>
            }
        </select>
    </div>
    <!--Add edit and detail button later-->
    <div class="col-1 col-md-1 mb-3 mt-4" style="width: 38px; margin-right: 10px;">
        <Tooltip Title="New Education" Color="TooltipColor.Dark" Style="padding-top: 5px;">
            <NavLink href="/educations/create" class="btn btn-primary px-2" style="height: 38px; padding-top: 3px;">
                <Icon Name="IconName.PlusCircle" Size="IconSize.x5"/>
            </NavLink>
        </Tooltip>
    </div>
    <div class="col-1 col-md-1 mb-3 mt-4" style="width: 38px">
        <Button Color="ButtonColor.Secondary" class="px-2" style="height: 38px; padding-top: 3px;" @onclick="ReloadData">
            <Icon Name="IconName.ArrowRepeat" Size="IconSize.x5"/>
        </Button>
    </div>
    <div class="col-12 col-lg-5 text-end ms-auto mb-3 mt-4">
        <h3 class="nowrap">Education Average: @(_educationAverage == 0 ? "N/A" : _educationAverage.ToString("0.##"))</h3>
    </div>
</div>

<!--Enable paging for large data-->
<div class="row py-4">
    <Grid TItem="Subject"
          Class="table table-hover"
          Data="@_subjects.OrderBy(s => s.Name)"
          EmptyText="No records to display"
          HeaderRowCssClass="border-bottom-0"
          Responsive="true">

        <GridColumns>
            <GridColumn TItem="Subject" HeaderText="Subject" PropertyName="Name" Class="name-column">
                @TruncateString(context.Name, 21) - @context.Semester
            </GridColumn>
            <GridColumn TItem="Subject" HeaderText="Grades" SortKeySelector="item => item.Grades != null ? item.Grades.Count : 0" Class="grades-column">
                @if (context.Grades != null && context.Grades.Any())
                {
                    @string.Join(" | ", context.Grades.Select(grade =>
                        $"{grade.Value} ({grade.Weight.Name}) "))
                }
                else
                {
                    <span>No Grades </span>
                }
                <Tooltip Title="New Grade" Color="TooltipColor.Dark">
                    <NavLink href="/grades/create" class="btn btn-secondary px-1" style="height: 28px; width: 28px; padding-top: 1px;">
                        <Icon Name="IconName.PlusCircle" Size="IconSize.x6"/>
                    </NavLink>
                </Tooltip>
                <!--Later add detail navigation to every grade-->
            </GridColumn>
            <GridColumn TItem="Subject" HeaderText="Average" SortKeySelector="item => item.Grades != null ? item.Grades.Average(g => g.Value) : 0" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.Center" Class="average-grade-column">
                @if (CalculateWeightedAverage(context.Grades) < 4 && CalculateWeightedAverage(context.Grades) != 0)
                {
                    <Badge Color="BadgeColor.Danger" IndicatorType="BadgeIndicatorType.RoundedPill" Style="font-size: initial">
                        <b>@GetAverageGrade(context.Grades)</b>
                    </Badge>
                }
                else
                {
                    <b>@GetAverageGrade(context.Grades)</b>
                }
            </GridColumn>
        </GridColumns>
    </Grid>
    <!--Later add detail of every row-->
    @if (_currentEducationId != 0)
    {
        <NavLink href="/subjects/create" class="btn btn-success px-1" style="margin-left: 12px; width: 135px">
            New Subject <i class="bi bi-plus-circle"></i>
        </NavLink>
    }
</div>

<!--for loading initially-->
<ThemeSwitcher Style="visibility: hidden;"/>

<style>
    .name-column { width: 225px; }

    .average-grade-column { width: 100px; }

    .grades-column { width: auto; }

    .nowrap { white-space: nowrap; }
</style>

@code
{
    private int _currentEducationId;
    private List<Education> _educations = new();
    private List<Subject> _subjects = new();

    private decimal _educationAverage = new();
    private int? _selectedEducationId;

    [Inject] private IEducationRepository EducationRepository { get; set; }
    [Inject] private ISubjectRepository SubjectRepository { get; set; }

    [Inject] private NavigationManager Navigation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _educations = await EducationRepository.GetAllAsync();
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("educationId", out var educationIdString) && int.TryParse(educationIdString, out var educationId))
        {
            _selectedEducationId = educationId;
            await LoadEducationData(educationId);
        }
        else
        {
            // Navigate to the URL with the default query parameter
            Navigation.NavigateTo($"?", false);
        }
    }

    private int? SelectedEducationId
    {
        get => _selectedEducationId;
        set
        {
            if (_selectedEducationId != value)
            {
                _selectedEducationId = value;
                ChangeEducation(value);
            }
        }
    }

    private async void ChangeEducation(int? educationId)
    {
        if (educationId.HasValue)
        {
            await LoadEducationData(educationId.Value);
            Navigation.NavigateTo($"?educationId={educationId}", false);
        }
        else
        {
            _currentEducationId = 0;
            _subjects = new List<Subject>();
            _educationAverage = 0;
        }
    }

    private async Task LoadEducationData(int educationId)
    {
        _currentEducationId = educationId;
        _subjects = await SubjectRepository.GetByEducationIdAsync(educationId);
        _educationAverage = CalculateEducationAverage(_subjects);
    }

    #region Averages

    private decimal CalculateEducationAverage(List<Subject> subjects)
    {
        if (subjects == null || !subjects.Any())
        {
            return 0;
        }

        var subjectAverages = subjects
            .Where(s => s.Grades != null && s.Grades.Any())
            .Select(s => CalculateWeightedAverage(s.Grades));

        if (!subjectAverages.Any())
        {
            return 0;
        }

        return subjectAverages.Average();
    }

    private string GetAverageGrade(ICollection<Grade> grades)
    {
        if (grades != null && grades.Any())
        {
            return CalculateWeightedAverage(grades).ToString("0.##");
        }

        return "N/A";
    }

    private decimal CalculateWeightedAverage(ICollection<Grade> grades)
    {
        if (grades == null || !grades.Any())
        {
            return 0;
        }

        decimal totalWeight = grades.Sum(g => g.Weight?.Value ?? 1); // Default weight to 1 if null
        if (totalWeight == 0)
        {
            return 0;
        }

        decimal weightedSum = grades.Sum(g => g.Value * (g.Weight?.Value ?? 1)); // Default weight to 1 if null
        return weightedSum / totalWeight;
    }

    #endregion

    private string TruncateString(string name, int maxLength)
    {
        if (string.IsNullOrEmpty(name) || name.Length <= maxLength)
        {
            return name;
        }

        return name.Substring(0, maxLength) + "...";
    }

    private async Task ReloadData()
    {
        if (_selectedEducationId.HasValue)
        {
            await LoadEducationData(_selectedEducationId.Value);
        }
    }
}