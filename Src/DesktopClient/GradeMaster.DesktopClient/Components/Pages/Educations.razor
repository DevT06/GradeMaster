@page "/educations"

<HeadContent>
    <style>
        html, body {
            overflow-y: scroll
        }
    </style>
</HeadContent>

<TopPageHeader>Educations</TopPageHeader>

<div class="row py-3 mx-0">
    <!--had classes: bd-navbar sticky-top-->
    <div class="col-8 col-md-8 px-0 mb-3" style="max-width: 400px">
        <b>Search:</b>
        <EditForm Model="_searchValue" OnValidSubmit="FilterEducations">
            <InputText class="form-control" placeholder="Search for Education" @bind-Value="_searchValue"/>
        </EditForm>
    </div>
    <!--Add edit and detail button later-->
    <div class="col-1 col-md-1 mb-3 mt-4" style="width: 38px; margin-right: 10px">
        <Button Color="ButtonColor.Primary" class="px-2" style="height: 38px; padding-top: 3px;" @onclick="FilterEducations">
            @* <i class="bi bi-plus-circle" style="font-size: 20px"></i> *@
            <Icon Name="IconName.Search" Size="IconSize.x5"/>
        </Button>
    </div>
    <div class="col-1 col-md-1 mb-3 mt-4" style="width: 38px">
        <Button Color="ButtonColor.Secondary" class="px-2" style="height: 38px; padding-top: 3px;" @onclick="LoadAllEducations">
            <Icon Name="IconName.ArrowRepeat" Size="IconSize.x5"/>
        </Button>
    </div>
    <div class="col-4 col-md-4 text-end ms-auto mb-3 mt-4" style="width: 150px;">
        <Button Color="ButtonColor.Success" @onclick="CreateEducation" Size="ButtonSize.Medium" Style="height: 38px;">
            New <Icon Name="IconName.PlusCircle"/>
        </Button>
    </div>
</div>
<div class="container align-content-center" style="margin-bottom: 25px;"> <!--set overflow to hidden maybe-->
    <div class="component-card-grid py-4"> <!--set overflow to hidden maybe-->
        @* <Virtualize TItem="Education" Items="@(_filteredEducations.OrderByDescending(e => e.Id).ToList())" Context="education" OverscanCount="12"> *@
        <Virtualize TItem="Education" ItemsProvider="GetEducationsProvider" Context="education" OverscanCount="12" @ref="VirtualizeComponent">
            <ItemContent>
                <EducationCard @key="@education.Id" Education="@education" OnEducationDeleted="HandleEducationDeleted"/>
            </ItemContent>
            <EmptyContent>
                <div></div>
                <div class="text-center py-4" style="grid-column: 1/-1;">
                    <p>No educations found. Try adjusting your search or add a new education.</p>
                </div>
                <div></div>
            </EmptyContent>
            <Placeholder>
                <Spinner Type="SpinnerType.Dots" Class="me-3" Color="SpinnerColor.Secondary" />
            </Placeholder>
        </Virtualize>
    </div>
</div>
@*was <div class="component-card-grid py-4">
@foreach (Education education in _filteredEducations.OrderByDescending(e => e.Id))
{
            <EducationCard Education="@education" OnEducationDeleted="HandleEducationDeleted"/>
}
    </div>*@
<style>
    .component-card-grid > div:first-child,
    .component-card-grid > div:last-child {
        grid-column: 1 / -1; /* Span the entire grid without creating empty spaces */
        /* visibility: hidden; */ /* Keep them invisible but functional */
        height: auto; /* Retain the height set by Virtualize */
    }
</style>

@code {
    [Inject] private IEducationRepository _educationRepository { get; set; }
    [Inject] private IGradeRepository _gradeRepository { get; set; }

    [Inject] private NavigationManager Navigation { get; set; }

    private string _searchValue = String.Empty;

    private Virtualize<Education> VirtualizeComponent;

    private List<Education> _educations = new();
    private List<Education> _filteredEducations = new();

    private async ValueTask<ItemsProviderResult<Education>> GetEducationsProvider(ItemsProviderRequest request)
    {
        int startIndex = request.StartIndex;
        int count = request.Count;

        // Fetch only the required slice of data
        var fetchedEducations = await _educationRepository.GetBySearchWithLimitAsync(_searchValue, startIndex, count);

        // Calculate the total number of items (if known or needed)
        int totalItemCount = await _educationRepository.GetTotalCountAsync(_searchValue);

        // Return the result to the Virtualize component
        return new ItemsProviderResult<Education>(fetchedEducations, totalItemCount);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadEducations();
        await _gradeRepository.GetAllWithWeightAsync();
    }

    private async Task LoadEducations()
    {
        _educations = await _educationRepository.GetAllAsync();
        _filteredEducations = _educations;
    }

    private async Task LoadAllEducations()
    {
        _searchValue = String.Empty;
        await VirtualizeComponent.RefreshDataAsync();
        await LoadEducations();
    }

    private async void FilterEducations()
    {
        await VirtualizeComponent.RefreshDataAsync();

        // if (string.IsNullOrWhiteSpace(_searchValue))
        // {
        //     _filteredEducations = _educations;
        // }
        // else
        // {
        //     _filteredEducations = _educations
        //         .Where(education =>
        //             education.Name.Contains(_searchValue, StringComparison.OrdinalIgnoreCase) ||
        //             (education.Description != null && education.Description.Contains(_searchValue, StringComparison.OrdinalIgnoreCase)) ||
        //             education.Semesters.ToString().Contains(_searchValue, StringComparison.OrdinalIgnoreCase) ||
        //             (education.Institution != null && education.Institution.Contains(_searchValue, StringComparison.OrdinalIgnoreCase)))
        //         .ToList();
        // }
    }

    private async void HandleEducationDeleted(int educationId)
    {
        var education = _filteredEducations.FirstOrDefault(e => e.Id == educationId);
        if (education != null)
        {
            _filteredEducations.Remove(education);
        }

        // Trigger a refresh of the Virtualize component
        await VirtualizeComponent.RefreshDataAsync();
    }

    private void CreateEducation()
    {
        Navigation.NavigateTo("/educations/create");
    }

}