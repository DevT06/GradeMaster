@page "/education"

<TopPageHeader>Educations</TopPageHeader>

<div class="row py-3 mx-0">
    <!--had classes: bd-navbar sticky-top-->
    <div class="col-8 col-md-8 px-0 mb-3" style="max-width: 400px">
        <b>Search:</b>
        <EditForm Model="_searchValue" OnValidSubmit="FilterEducations">
            <InputText class="form-control" placeholder="Search for Education" @bind-Value="_searchValue"/>
        </EditForm>
    </div>
    <!--Add edit and detail button later-->
    <div class="col-1 col-md-1 mb-3 mt-4" style="width: 38px; margin-right: 10px">
        <Button Color="ButtonColor.Primary" class="px-2" style="height: 38px; padding-top: 3px;" @onclick="FilterEducations">
            @* <i class="bi bi-plus-circle" style="font-size: 20px"></i> *@
            <Icon Name="IconName.Search" Size="IconSize.x5"/>
        </Button>
    </div>
    <div class="col-1 col-md-1 mb-3 mt-4" style="width: 38px">
            <Button Color="ButtonColor.Secondary" class="px-2" style="height: 38px; padding-top: 3px;" @onclick="LoadAllEducations">
                <Icon Name="IconName.ArrowRepeat" Size="IconSize.x5"/>
            </Button>
    </div>
    @* <div class="col-12 col-lg-5 text-end ms-auto mb-3 mt-4">

    </div> *@
</div>
<div class="container align-content-center">
    <div class="education-grid py-4">
        @foreach (Education education in _filteredEducations)
        {
            <EducationCard Education="@education" OnEducationDeleted="HandleEducationDeleted" />
        }
    </div>
</div>
<div style="position: fixed; bottom: 16px; right: 16px; z-index: 1000">
    <Button Color="ButtonColor.Success" @onclick="CreateEducation" class="px-2" style="height: 40px; width: 40px; padding-top: 3px;" TooltipPlacement="TooltipPlacement.Left" TooltipTitle="New Education">
        <Icon Name="IconName.PlusCircle" Size="IconSize.x5" />
    </Button>
</div>
<Toasts class="p-3" Placement="ToastsPlacement.TopRight" StackLength="1" AutoHide="true" />

@code {
    [Inject] private IEducationRepository _educationRepository { get; set; }

    [Inject] private NavigationManager Navigation { get; set; }

    private string _searchValue = String.Empty;

    private List<Education> _educations = new();
    private List<Education> _filteredEducations = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadEducations();
    }

    private async Task LoadEducations()
    {
        _educations = await _educationRepository.GetAllAsync();
        _filteredEducations = _educations;
    }

    private async Task LoadAllEducations()
    {
        _searchValue = String.Empty;
        await LoadEducations();
    }

    private void FilterEducations()
    {
        if (string.IsNullOrWhiteSpace(_searchValue))
        {
            _filteredEducations = _educations;
        }
        else
        {
            _filteredEducations = _educations
                .Where(education =>
                    education.Name.Contains(_searchValue, StringComparison.OrdinalIgnoreCase) ||
                    (education.Description != null && education.Description.Contains(_searchValue, StringComparison.OrdinalIgnoreCase)) ||
                    education.Semesters.ToString().Contains(_searchValue, StringComparison.OrdinalIgnoreCase) ||
                    (education.Institution != null && education.Institution.Contains(_searchValue, StringComparison.OrdinalIgnoreCase)))
                .ToList();
        }
    }

    private void HandleEducationDeleted(int educationId)
    {
        var education = _filteredEducations.FirstOrDefault(e => e.Id == educationId);
        if (education != null)
        {
            _filteredEducations.Remove(education);
        }
    }

    private void CreateEducation()
    {
        Navigation.NavigateTo("/education/create");
    }
}