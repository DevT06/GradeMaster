@page "/subjects"

<HeadContent>
    <style>
        html, body {
            overflow-y: scroll
        }
    </style>
</HeadContent>

<TopPageHeader>Subjects</TopPageHeader>

<div class="row py-3 mx-0">
    <!--had classes: bd-navbar sticky-top-->
    <div class="col-8 col-md-8 px-0 mb-3" style="max-width: 400px">
        <b>Search:</b>
        <EditForm Model="_searchValue" OnValidSubmit="FilterSubjects">
            <InputText id="searchFieldSubject" class="form-control" placeholder="Search for Subject" @bind-Value="_searchValue" />
        </EditForm>
    </div>
    <!--Add edit and detail button later-->
    <div class="col-1 col-md-1 mb-3 mt-4" style="width: 38px; margin-right: 10px">
        <Button Color="ButtonColor.Primary" class="px-2" style="height: 38px; padding-top: 3px;" @onclick="FilterSubjects">
            @* <i class="bi bi-plus-circle" style="font-size: 20px"></i> *@
            <Icon Name="IconName.Search" Size="IconSize.x5" />
        </Button>
    </div>
    <div class="col-1 col-md-1 mb-3 mt-4" style="width: 38px">
        <Button Color="ButtonColor.Secondary" class="px-2" style="height: 38px; padding-top: 3px;" @onclick="LoadAllSubjects">
            <Icon Name="IconName.ArrowRepeat" Size="IconSize.x5" />
        </Button>
    </div>
    <div class="col-4 col-md-4 text-end ms-auto mb-3 mt-4" style="width: 150px;">
        <Button Color="ButtonColor.Success" @onclick="CreateSubject" Size="ButtonSize.Medium" Style="height: 38px;">
            New <Icon Name="IconName.PlusCircle" />
        </Button>
    </div>
</div>
<div class="container align-content-center" style="margin-bottom: 25px;">
    <div class="component-card-grid py-4">
        <Virtualize TItem="Subject" ItemsProvider="GetSubjectsProvider" Context="subject" OverscanCount="12" @ref="_virtualizeComponent">
            <ItemContent>
                <SubjectCard Subject="@subject" OnSubjectDeleted="HandleSubjectDeleted" />
            </ItemContent>
            <EmptyContent>
                <div></div>
                <div class="text-center py-4" style="grid-column: 1/-1;">
                    <p>No subjects found. Try adjusting your search or add a new subject.</p>
                </div>
                <div></div>
            </EmptyContent>
            <Placeholder>
                <div class="text-center">
                    <Spinner Type="SpinnerType.Dots" Class="me-3" Color="SpinnerColor.Secondary"/>
                </div>
            </Placeholder>
        </Virtualize>

        @*Was*@
        @* @foreach (Subject subject in _filteredSubjects.OrderByDescending(e => e.Id))
        {
            <SubjectCard Subject="@subject" OnSubjectDeleted="HandleSubjectDeleted"/>
        } *@
    </div>
</div>

<style>
    .component-card-grid > div:first-child,
    .component-card-grid > div:last-child {
        grid-column: 1/-1; /* Span the entire grid without creating empty spaces */
        /* visibility: hidden; */ /* Keep them invisible but functional */
        height: auto; /* Retain the height set by Virtualize */
    }
</style>

@code {
    [Inject] private ISubjectRepository _subjectRepository { get; set; }
    //[Inject] private IEducationRepository _educationRepository { get; set; }
    //[Inject] private IGradeRepository _gradeRepository { get; set; }
    [Inject] private IWeightRepository _weightRepository { get; set; }

    [Inject] private NavigationManager Navigation { get; set; }

    private string _searchValue = string.Empty;

    private Virtualize<Subject>? _virtualizeComponent;

    // private List<Subject> _subjects = new();
    // private List<Subject> _filteredSubjects = new();

    private async ValueTask<ItemsProviderResult<Subject>> GetSubjectsProvider(ItemsProviderRequest request)
    {
        var startIndex = request.StartIndex;
        var count = request.Count;

        // Fetch only the required slice of data
        var fetchedSubjects= await _subjectRepository.GetBySearchWithLimitAsync(_searchValue, startIndex, count);

        // Calculate the total number of items (if known or needed)
        var totalItemCount = await _subjectRepository.GetTotalCountAsync(_searchValue);

        // Return the result to the Virtualize component
        return new ItemsProviderResult<Subject>(fetchedSubjects, totalItemCount);
    }

    protected override async Task OnInitializedAsync()
    {
        await _weightRepository.GetAllAsync();
        // await LoadSubjects();
        // await _gradeRepository.GetAllWithWeightAsync();
    }

    // private async Task LoadSubjects()
    // {
    //     _subjects = await _subjectRepository.GetAllAsync();
    //     //await _educationRepository.GetAllAsync();
    //     _filteredSubjects = _subjects;
    // }

    private async Task LoadAllSubjects()
    {
        _searchValue = string.Empty;
        await _virtualizeComponent?.RefreshDataAsync();
        //await LoadSubjects();
    }

    private async Task FilterSubjects()
    {
        await _virtualizeComponent?.RefreshDataAsync();

        // if (string.IsNullOrWhiteSpace(_searchValue))
        // {
        //     _filteredSubjects = _subjects;
        // }
        // else
        // {
        //     _filteredSubjects = _subjects
        //         .Where(subject =>
        //             subject.Name.Contains(_searchValue, StringComparison.OrdinalIgnoreCase) ||
        //             (subject.Description != null && subject.Description.Contains(_searchValue, StringComparison.OrdinalIgnoreCase)) ||
        //             subject.Semester.ToString().Contains(_searchValue, StringComparison.OrdinalIgnoreCase) ||
        //             subject.Education.Name.Contains(_searchValue, StringComparison.OrdinalIgnoreCase))
        //         .ToList();
        // }
    }

    private async Task HandleSubjectDeleted(int subjectId)
    {
        // var subject = _filteredSubjects.FirstOrDefault(s => s.Id == subjectId);
        // if (subject != null)
        // {
        //     _filteredSubjects.Remove(subject);
        // }

        await _virtualizeComponent?.RefreshDataAsync();
    }

    private void CreateSubject()
    {
        Navigation.NavigateTo("/subjects/create");
    }
}
